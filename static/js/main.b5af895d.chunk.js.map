{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","submit","type","value","placeholder","onChange","change","Result","weather","city","sunrise","sunset","temp","pressure","wind","country","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","className","APIKey","App","state","date","dateClock","handleInputChange","e","setState","target","toUpperCase","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","prevState","sys","main","toFixed","speed","catch","this","timerID","setInterval","tick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5af895d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <form onSubmit={props.submit}>\r\n      <input\r\n        type=\"text\"\r\n        value={props.value}\r\n        placeholder=\"Wpisz miasto...\"\r\n        onChange={props.change}\r\n      />\r\n      <button>Wyszukaj miasta</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst Result = (props) => {\r\n  const {\r\n    // date,\r\n    city,\r\n    sunrise,\r\n    sunset,\r\n    temp,\r\n    pressure,\r\n    wind,\r\n    country,\r\n    err,\r\n  } = props.weather;\r\n\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n    content = (\r\n      <div>\r\n        <h3>\r\n          Informacje pogodowe dla:\r\n          <br />\r\n          <em>\r\n            {city}, {country}\r\n          </em>\r\n        </h3>\r\n        {/* <h4>\r\n          Data i godzina: <span>{date}</span>\r\n        </h4> */}\r\n        <h4 className=\"temp\">\r\n          Aktualna temperatura:\r\n          <br />\r\n          <span>{temp} &#176;C</span>\r\n        </h4>\r\n        <h4>\r\n          Wschód słońca dzisiaj o: <span>{sunriseTime}</span>\r\n        </h4>\r\n        <h4>\r\n          Zachód słońca dzisiaj o: <span>{sunsetTime}</span>\r\n        </h4>\r\n        <h4>\r\n          Ciśnienie: <span>{pressure} hPa</span>\r\n        </h4>\r\n        <h4>\r\n          Prędkość wiatru: <span>{wind} m/s</span>\r\n        </h4>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div className=\"result\">{err ? null : content}</div>;\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\n\n//Klucz do API\nconst APIKey = \"32c9e1f12931409af602daf1b7e25f97\";\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    country: \"\",\n    err: false,\n    dateClock: new Date(),\n  };\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  tick() {\n    this.setState({ dateClock: new Date() });\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value.toUpperCase(),\n    });\n  };\n\n  handleCitySubmit = (e) => {\n    e.preventDefault();\n\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n\n    fetch(API)\n      .then((response) => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(\"nie udało się\");\n      })\n      .then((response) => response.json())\n      .then((data) => {\n        const time = new Date().toLocaleString();\n        this.setState((prevState) => ({\n          err: false,\n          date: time,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          temp: data.main.temp.toFixed(0),\n          pressure: data.main.pressure,\n          wind: data.wind.speed,\n          city: prevState.value,\n        }));\n      })\n      .catch((err) =>\n        this.setState((state) => ({\n          err: true,\n          city: state.value,\n        }))\n      );\n  };\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.value.length === 0) return;\n  //   if (prevState.value !== this.state.value) {\n  //     const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n\n  //     fetch(API)\n  //       .then((response) => {\n  //         if (response.ok) {\n  //           return response;\n  //         }\n  //         throw Error(\"nie udało się\");\n  //       })\n  //       .then((response) => response.json())\n  //       .then((data) => {\n  //         const time = new Date().toLocaleString();\n  //         this.setState((prevState) => ({\n  //           err: false,\n  //           date: time,\n  //           sunrise: data.sys.sunrise,\n  //           sunset: data.sys.sunset,\n  //           temp: data.main.temp.toFixed(0),\n  //           pressure: data.main.pressure,\n  //           wind: data.wind.speed,\n  //           city: prevState.value,\n  //           country: data.sys.country,\n  //         }));\n  //       })\n  //       .catch((err) =>\n  //         this.setState((state) => ({\n  //           err: true,\n  //           city: state.value,\n  //         }))\n  //       );\n  //   }\n  // }\n\n  render() {\n    // const { date, sunrise, sunset, temp, pressure, wind } = this.state;\n    return (\n      <div className=\"App\">\n        <Form\n          value={this.state.value}\n          change={this.handleInputChange}\n          submit={this.handleCitySubmit}\n        />\n        <Result className=\"result\" weather={this.state} />\n        <div className=\"infoBar\">\n          <p>Informacje pogodowe dla: {this.state.city}</p>\n          <span>{this.state.dateClock.toLocaleString()}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}